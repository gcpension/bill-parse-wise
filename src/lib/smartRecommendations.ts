import { ManualPlan } from '@/data/manual-plans';
import { UserProfile, PersonalizedRecommendationEngine, PersonalizedRecommendation } from './personalizedRecommendations';

export interface AutoGeneratedProfile {
  profile: UserProfile;
  confidence: number;
  source: string;
}

export interface RecommendationParameter {
  name: string;
  value: string;
  weight: number;
  icon: string;
  description: string;
}

export interface RecommendationExplanation {
  profileSummary: string;
  keyParameters: RecommendationParameter[];
  matchReasons: string[];
  confidenceLevel: number;
}

/**
 * Smart Recommendations Engine - Generates personalized recommendations without explicit user input
 * Uses existing data (category, current bill, time of day, etc.) to infer user needs
 */
export class SmartRecommendationsEngine {
  
  /**
   * Generate automatic user profile from minimal data
   */
  static generateAutoProfile(
    currentMonthlyBill: number,
    category: string,
    timeOfDay?: 'morning' | 'day' | 'evening' | 'night'
  ): AutoGeneratedProfile {
    console.log('🤖 Generating automatic profile:', { currentMonthlyBill, category, timeOfDay });
    
    // Infer family size from budget
    let familySize = 2;
    let homeType: 'apartment' | 'house' | 'student' | 'business' = 'apartment';
    
    if (category === 'electricity' || category === 'חשמל') {
      if (currentMonthlyBill > 500) {
        familySize = 5;
        homeType = 'house';
      } else if (currentMonthlyBill > 300) {
        familySize = 4;
      } else if (currentMonthlyBill > 200) {
        familySize = 3;
      } else if (currentMonthlyBill < 100) {
        familySize = 1;
      }
    } else if (category === 'cellular' || category === 'סלולר' || category === 'mobile') {
      if (currentMonthlyBill > 300) {
        familySize = 5;
      } else if (currentMonthlyBill > 200) {
        familySize = 4;
      } else if (currentMonthlyBill > 150) {
        familySize = 3;
      } else if (currentMonthlyBill < 50) {
        familySize = 1;
      }
    } else if (category === 'internet' || category === 'אינטרנט') {
      // Internet doesn't scale much with family, but heavy users pay more
      if (currentMonthlyBill > 150) {
        familySize = 4;
      } else if (currentMonthlyBill > 100) {
        familySize = 3;
      }
    } else if (category === 'tv' || category === 'טלוויזיה') {
      if (currentMonthlyBill > 250) {
        familySize = 4;
      } else if (currentMonthlyBill > 150) {
        familySize = 3;
      }
    }
    
    // Infer usage level from spending
    let usageLevel: 'light' | 'medium' | 'heavy' | 'extreme' = 'medium';
    const avgBudget = this.getAverageBudgetForCategory(category);
    const ratio = currentMonthlyBill / avgBudget;
    
    if (ratio > 1.5) {
      usageLevel = 'extreme';
    } else if (ratio > 1.2) {
      usageLevel = 'heavy';
    } else if (ratio < 0.7) {
      usageLevel = 'light';
    }
    
    // Infer usage time from current time
    const usageHours = timeOfDay || this.inferTimeOfDay();
    
    // Infer work from home from time and usage
    const workFromHome = usageHours === 'day' && usageLevel !== 'light';
    
    // Category-specific default priorities
    const priorities = this.getCategoryDefaultPriorities(category);
    
    // Build profile
    const profile: UserProfile = {
      familySize,
      homeType,
      monthlyBudget: currentMonthlyBill > 0 ? currentMonthlyBill : avgBudget,
      currentMonthlySpend: currentMonthlyBill,
      currentProvider: 'לא ידוע',
      priceFlexibility: currentMonthlyBill > 0 ? 'flexible' : 'strict',
      usageLevel,
      usageHours,
      workFromHome,
      streamingHeavy: usageLevel === 'heavy' || usageLevel === 'extreme',
      gamingHeavy: usageLevel === 'extreme',
      priorities,
      contractFlexibility: 'doesnt_matter',
      technologyPreference: 'stable',
      supportImportance: 'important',
    };
    
    // Confidence based on available data
    let confidence = 0.65; // Base confidence
    if (currentMonthlyBill > 0) confidence += 0.15;
    if (timeOfDay) confidence += 0.05;
    
    return {
      profile,
      confidence,
      source: 'auto-inferred from usage data'
    };
  }
  
  /**
   * Get average budget for category
   */
  private static getAverageBudgetForCategory(category: string): number {
    const categoryKey = this.normalizeCategoryKey(category);
    
    const averages: Record<string, number> = {
      'electricity': 250,
      'חשמל': 250,
      'internet': 100,
      'אינטרנט': 100,
      'cellular': 150,
      'סלולר': 150,
      'mobile': 150,
      'tv': 180,
      'טלוויזיה': 180,
    };
    
    return averages[categoryKey] || 200;
  }
  
  /**
   * Get category-specific default priorities
   */
  private static getCategoryDefaultPriorities(category: string): UserProfile['priorities'] {
    const categoryKey = this.normalizeCategoryKey(category);
    
    // Default priorities per category
    const defaults: Record<string, UserProfile['priorities']> = {
      'electricity': {
        price: 5,
        reliability: 5,
        speed: 2,
        customerService: 3,
        flexibility: 3,
        features: 2,
        brandTrust: 4,
        innovation: 2,
      },
      'חשמל': {
        price: 5,
        reliability: 5,
        speed: 2,
        customerService: 3,
        flexibility: 3,
        features: 2,
        brandTrust: 4,
        innovation: 2,
      },
      'internet': {
        price: 4,
        reliability: 5,
        speed: 5,
        customerService: 3,
        flexibility: 3,
        features: 3,
        brandTrust: 3,
        innovation: 3,
      },
      'אינטרנט': {
        price: 4,
        reliability: 5,
        speed: 5,
        customerService: 3,
        flexibility: 3,
        features: 3,
        brandTrust: 3,
        innovation: 3,
      },
      'cellular': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'סלולר': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'mobile': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'tv': {
        price: 4,
        reliability: 4,
        speed: 2,
        customerService: 4,
        flexibility: 3,
        features: 5,
        brandTrust: 3,
        innovation: 3,
      },
      'טלוויזיה': {
        price: 4,
        reliability: 4,
        speed: 2,
        customerService: 4,
        flexibility: 3,
        features: 5,
        brandTrust: 3,
        innovation: 3,
      },
    };
    
    return defaults[categoryKey] || {
      price: 4,
      reliability: 4,
      speed: 3,
      customerService: 3,
      flexibility: 3,
      features: 3,
      brandTrust: 3,
      innovation: 3,
    };
  }
  
  /**
   * Normalize category key to handle both Hebrew and English
   */
  private static normalizeCategoryKey(category: string): string {
    const normalized = category.toLowerCase().trim();
    const mapping: Record<string, string> = {
      'חשמל': 'electricity',
      'electricity': 'electricity',
      'אינטרנט': 'internet',
      'internet': 'internet',
      'סלולר': 'cellular',
      'cellular': 'cellular',
      'mobile': 'cellular',
      'טלוויזיה': 'tv',
      'tv': 'tv',
    };
    return mapping[normalized] || normalized;
  }
  
  /**
   * Infer time of day from current time
   */
  private static inferTimeOfDay(): 'morning' | 'day' | 'evening' | 'night' {
    const hour = new Date().getHours();
    
    if (hour >= 6 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'day';
    if (hour >= 18 && hour < 23) return 'evening';
    return 'night';
  }
  
  /**
   * Generate explanation for the recommendation
   */
  static generateExplanation(
    profile: UserProfile,
    category: string,
    confidence: number
  ): RecommendationExplanation {
    const categoryKey = this.normalizeCategoryKey(category);
    const categoryHebrew = this.getCategoryHebrewName(categoryKey);
    
    // Profile summary
    const profileSummary = `משפחה של ${profile.familySize} נפשות עם תקציב של ₪${profile.monthlyBudget} לחודש`;
    
    // Build key parameters
    const keyParameters: RecommendationParameter[] = [];
    
    // Family size parameter
    keyParameters.push({
      name: 'גודל משפחה',
      value: `${profile.familySize} נפשות`,
      weight: 0.25,
      icon: '👨‍👩‍👧‍👦',
      description: profile.familySize >= 4 
        ? 'משפחה גדולה - צריכה גבוהה צפויה'
        : profile.familySize >= 3
        ? 'משפחה בינונית - צריכה סטנדרטית'
        : 'משפחה קטנה/יחיד - צריכה חסכונית'
    });
    
    // Budget parameter
    const avgBudget = this.getAverageBudgetForCategory(category);
    const budgetRatio = profile.monthlyBudget / avgBudget;
    keyParameters.push({
      name: 'תקציב חודשי',
      value: `₪${profile.monthlyBudget}`,
      weight: 0.30,
      icon: '💰',
      description: budgetRatio > 1.2
        ? 'תקציב גבוה - מחפש פיתרון פרימיום'
        : budgetRatio > 0.8
        ? 'תקציב סטנדרטי - איזון בין מחיר לאיכות'
        : 'תקציב נמוך - מחפש חיסכון מקסימלי'
    });
    
    // Usage level parameter
    keyParameters.push({
      name: 'רמת שימוש',
      value: profile.usageLevel === 'extreme' ? 'גבוהה מאוד' 
        : profile.usageLevel === 'heavy' ? 'גבוהה'
        : profile.usageLevel === 'medium' ? 'בינונית'
        : 'נמוכה',
      weight: 0.20,
      icon: '📊',
      description: profile.usageLevel === 'extreme'
        ? 'שימוש אינטנסיבי - נדרש פתרון עם משאבים גדולים'
        : profile.usageLevel === 'heavy'
        ? 'שימוש גבוה - נדרש פתרון איכותי'
        : profile.usageLevel === 'medium'
        ? 'שימוש סטנדרטי - מסלול בסיסי מספק'
        : 'שימוש נמוך - מסלול חסכוני'
    });
    
    // Category-specific priority
    const topPriority = this.getTopPriorityForCategory(categoryKey, profile.priorities);
    keyParameters.push({
      name: 'עדיפות ראשית',
      value: topPriority.name,
      weight: 0.25,
      icon: topPriority.icon,
      description: topPriority.description
    });
    
    // Match reasons based on profile
    const matchReasons: string[] = [];
    
    if (budgetRatio < 0.9) {
      matchReasons.push('💡 חיסכון משמעותי בעלויות החודשיות');
    }
    
    if (profile.familySize >= 4) {
      matchReasons.push('👨‍👩‍👧‍👦 מתאים למשפחות גדולות עם צריכה גבוהה');
    }
    
    if (profile.usageLevel === 'extreme' || profile.usageLevel === 'heavy') {
      matchReasons.push('📡 מספק ביצועים גבוהים למשתמשים כבדים');
    }
    
    if (categoryKey === 'electricity' || categoryKey === 'חשמל') {
      matchReasons.push('⚡ חברה אמינה עם שירות יציב');
    }
    
    if (categoryKey === 'internet' || categoryKey === 'אינטרנט') {
      matchReasons.push('🚀 מהירויות גבוהות לגלישה חלקה');
    }
    
    if (categoryKey === 'cellular') {
      matchReasons.push('📱 כיסוי רחב ברחבי הארץ');
    }
    
    if (profile.workFromHome) {
      matchReasons.push('🏠 מותאם לעבודה מהבית');
    }
    
    return {
      profileSummary,
      keyParameters,
      matchReasons,
      confidenceLevel: confidence
    };
  }
  
  /**
   * Get Hebrew name for category
   */
  private static getCategoryHebrewName(categoryKey: string): string {
    const names: Record<string, string> = {
      'electricity': 'חשמל',
      'internet': 'אינטרנט',
      'cellular': 'סלולר',
      'tv': 'טלוויזיה'
    };
    return names[categoryKey] || categoryKey;
  }
  
  /**
   * Get top priority for category
   */
  private static getTopPriorityForCategory(
    categoryKey: string,
    priorities: UserProfile['priorities']
  ): { name: string; icon: string; description: string } {
    // Find highest priority
    const entries = Object.entries(priorities);
    entries.sort((a, b) => b[1] - a[1]);
    const topKey = entries[0][0];
    
    const priorityMap: Record<string, { name: string; icon: string; description: string }> = {
      'price': {
        name: 'מחיר נמוך',
        icon: '💰',
        description: 'מחפש את המחיר הטוב ביותר בשוק'
      },
      'reliability': {
        name: 'אמינות',
        icon: '🔒',
        description: 'חשוב שהשירות יהיה יציב וללא תקלות'
      },
      'speed': {
        name: 'מהירות',
        icon: '⚡',
        description: 'מחפש ביצועים גבוהים ומהירויות מקסימליות'
      },
      'customerService': {
        name: 'שירות לקוחות',
        icon: '🎧',
        description: 'חשוב שיהיה תמיכה טובה וזמינה'
      },
      'flexibility': {
        name: 'גמישות',
        icon: '🌟',
        description: 'רוצה חופש לשנות ללא התחייבות ארוכה'
      },
      'features': {
        name: 'תכונות',
        icon: '✨',
        description: 'מחפש מסלול עשיר בתכונות ואפשרויות'
      },
      'brandTrust': {
        name: 'מוניטין',
        icon: '⭐',
        description: 'מעדיף חברות מוכרות ומהימנות'
      },
      'innovation': {
        name: 'חדשנות',
        icon: '🚀',
        description: 'מחפש טכנולוגיות חדשות ומתקדמות'
      }
    };
    
    return priorityMap[topKey] || priorityMap['price'];
  }
  
  /**
   * Generate automatic recommendations from minimal data
   */
  static generateAutoRecommendations(
    plans: ManualPlan[],
    currentMonthlyBill: number,
    category: string,
    limit: number = 3
  ): { recommendations: PersonalizedRecommendation[]; explanation: RecommendationExplanation } {
    console.log('🎯 Generating auto recommendations:', { 
      plansCount: plans.length, 
      currentMonthlyBill, 
      category,
      limit 
    });
    
    // Generate automatic profile
    const { profile, confidence } = this.generateAutoProfile(currentMonthlyBill, category);
    
    console.log('📊 Generated profile:', {
      familySize: profile.familySize,
      budget: profile.monthlyBudget,
      usageLevel: profile.usageLevel,
      confidence
    });
    
    // Use existing recommendation engine with auto-generated profile
    const recommendations = PersonalizedRecommendationEngine.generatePersonalizedRecommendations(
      plans,
      profile,
      this.normalizeCategoryKey(category)
    );
    
    // Adjust confidence levels
    recommendations.forEach(rec => {
      rec.confidenceLevel = Math.min(rec.confidenceLevel * confidence, 0.85);
    });
    
    // Return top N recommendations with explanation
    const topRecommendations = recommendations.slice(0, limit);
    
    // Generate explanation
    const explanation = this.generateExplanation(profile, category, confidence);
    
    console.log('✅ Generated top recommendations:', 
      topRecommendations.map(r => ({
        company: plans.find(p => p.id === r.planId)?.company,
        score: r.personalizedScore,
        confidence: r.confidenceLevel
      }))
    );
    
    return { recommendations: topRecommendations, explanation };
  }
}
