import { ManualPlan } from '@/data/manual-plans';
import { UserProfile, PersonalizedRecommendationEngine, PersonalizedRecommendation } from './personalizedRecommendations';

export interface AutoGeneratedProfile {
  profile: UserProfile;
  confidence: number;
  source: string;
}

/**
 * Smart Recommendations Engine - Generates personalized recommendations without explicit user input
 * Uses existing data (category, current bill, time of day, etc.) to infer user needs
 */
export class SmartRecommendationsEngine {
  
  /**
   * Generate automatic user profile from minimal data
   */
  static generateAutoProfile(
    currentMonthlyBill: number,
    category: string,
    timeOfDay?: 'morning' | 'day' | 'evening' | 'night'
  ): AutoGeneratedProfile {
    console.log('🤖 Generating automatic profile:', { currentMonthlyBill, category, timeOfDay });
    
    // Infer family size from budget
    let familySize = 2;
    let homeType: 'apartment' | 'house' | 'student' | 'business' = 'apartment';
    
    if (category === 'electricity' || category === 'חשמל') {
      if (currentMonthlyBill > 500) {
        familySize = 5;
        homeType = 'house';
      } else if (currentMonthlyBill > 300) {
        familySize = 4;
      } else if (currentMonthlyBill > 200) {
        familySize = 3;
      } else if (currentMonthlyBill < 100) {
        familySize = 1;
      }
    } else if (category === 'cellular' || category === 'סלולר' || category === 'mobile') {
      if (currentMonthlyBill > 300) {
        familySize = 5;
      } else if (currentMonthlyBill > 200) {
        familySize = 4;
      } else if (currentMonthlyBill > 150) {
        familySize = 3;
      } else if (currentMonthlyBill < 50) {
        familySize = 1;
      }
    } else if (category === 'internet' || category === 'אינטרנט') {
      // Internet doesn't scale much with family, but heavy users pay more
      if (currentMonthlyBill > 150) {
        familySize = 4;
      } else if (currentMonthlyBill > 100) {
        familySize = 3;
      }
    } else if (category === 'tv' || category === 'טלוויזיה') {
      if (currentMonthlyBill > 250) {
        familySize = 4;
      } else if (currentMonthlyBill > 150) {
        familySize = 3;
      }
    }
    
    // Infer usage level from spending
    let usageLevel: 'light' | 'medium' | 'heavy' | 'extreme' = 'medium';
    const avgBudget = this.getAverageBudgetForCategory(category);
    const ratio = currentMonthlyBill / avgBudget;
    
    if (ratio > 1.5) {
      usageLevel = 'extreme';
    } else if (ratio > 1.2) {
      usageLevel = 'heavy';
    } else if (ratio < 0.7) {
      usageLevel = 'light';
    }
    
    // Infer usage time from current time
    const usageHours = timeOfDay || this.inferTimeOfDay();
    
    // Infer work from home from time and usage
    const workFromHome = usageHours === 'day' && usageLevel !== 'light';
    
    // Category-specific default priorities
    const priorities = this.getCategoryDefaultPriorities(category);
    
    // Build profile
    const profile: UserProfile = {
      familySize,
      homeType,
      monthlyBudget: currentMonthlyBill > 0 ? currentMonthlyBill : avgBudget,
      currentMonthlySpend: currentMonthlyBill,
      currentProvider: 'לא ידוע',
      priceFlexibility: currentMonthlyBill > 0 ? 'flexible' : 'strict',
      usageLevel,
      usageHours,
      workFromHome,
      streamingHeavy: usageLevel === 'heavy' || usageLevel === 'extreme',
      gamingHeavy: usageLevel === 'extreme',
      priorities,
      contractFlexibility: 'doesnt_matter',
      technologyPreference: 'stable',
      supportImportance: 'important',
    };
    
    // Confidence based on available data
    let confidence = 0.65; // Base confidence
    if (currentMonthlyBill > 0) confidence += 0.15;
    if (timeOfDay) confidence += 0.05;
    
    return {
      profile,
      confidence,
      source: 'auto-inferred from usage data'
    };
  }
  
  /**
   * Get average budget for category
   */
  private static getAverageBudgetForCategory(category: string): number {
    const categoryKey = this.normalizeCategoryKey(category);
    
    const averages: Record<string, number> = {
      'electricity': 250,
      'חשמל': 250,
      'internet': 100,
      'אינטרנט': 100,
      'cellular': 150,
      'סלולר': 150,
      'mobile': 150,
      'tv': 180,
      'טלוויזיה': 180,
    };
    
    return averages[categoryKey] || 200;
  }
  
  /**
   * Get category-specific default priorities
   */
  private static getCategoryDefaultPriorities(category: string): UserProfile['priorities'] {
    const categoryKey = this.normalizeCategoryKey(category);
    
    // Default priorities per category
    const defaults: Record<string, UserProfile['priorities']> = {
      'electricity': {
        price: 5,
        reliability: 5,
        speed: 2,
        customerService: 3,
        flexibility: 3,
        features: 2,
        brandTrust: 4,
        innovation: 2,
      },
      'חשמל': {
        price: 5,
        reliability: 5,
        speed: 2,
        customerService: 3,
        flexibility: 3,
        features: 2,
        brandTrust: 4,
        innovation: 2,
      },
      'internet': {
        price: 4,
        reliability: 5,
        speed: 5,
        customerService: 3,
        flexibility: 3,
        features: 3,
        brandTrust: 3,
        innovation: 3,
      },
      'אינטרנט': {
        price: 4,
        reliability: 5,
        speed: 5,
        customerService: 3,
        flexibility: 3,
        features: 3,
        brandTrust: 3,
        innovation: 3,
      },
      'cellular': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'סלולר': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'mobile': {
        price: 5,
        reliability: 4,
        speed: 4,
        customerService: 3,
        flexibility: 4,
        features: 3,
        brandTrust: 3,
        innovation: 2,
      },
      'tv': {
        price: 4,
        reliability: 4,
        speed: 2,
        customerService: 4,
        flexibility: 3,
        features: 5,
        brandTrust: 3,
        innovation: 3,
      },
      'טלוויזיה': {
        price: 4,
        reliability: 4,
        speed: 2,
        customerService: 4,
        flexibility: 3,
        features: 5,
        brandTrust: 3,
        innovation: 3,
      },
    };
    
    return defaults[categoryKey] || {
      price: 4,
      reliability: 4,
      speed: 3,
      customerService: 3,
      flexibility: 3,
      features: 3,
      brandTrust: 3,
      innovation: 3,
    };
  }
  
  /**
   * Normalize category key to handle both Hebrew and English
   */
  private static normalizeCategoryKey(category: string): string {
    const normalized = category.toLowerCase().trim();
    const mapping: Record<string, string> = {
      'חשמל': 'electricity',
      'electricity': 'electricity',
      'אינטרנט': 'internet',
      'internet': 'internet',
      'סלולר': 'cellular',
      'cellular': 'cellular',
      'mobile': 'cellular',
      'טלוויזיה': 'tv',
      'tv': 'tv',
    };
    return mapping[normalized] || normalized;
  }
  
  /**
   * Infer time of day from current time
   */
  private static inferTimeOfDay(): 'morning' | 'day' | 'evening' | 'night' {
    const hour = new Date().getHours();
    
    if (hour >= 6 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'day';
    if (hour >= 18 && hour < 23) return 'evening';
    return 'night';
  }
  
  /**
   * Generate automatic recommendations from minimal data
   */
  static generateAutoRecommendations(
    plans: ManualPlan[],
    currentMonthlyBill: number,
    category: string,
    limit: number = 3
  ): PersonalizedRecommendation[] {
    console.log('🎯 Generating auto recommendations:', { 
      plansCount: plans.length, 
      currentMonthlyBill, 
      category,
      limit 
    });
    
    // Generate automatic profile
    const { profile, confidence } = this.generateAutoProfile(currentMonthlyBill, category);
    
    console.log('📊 Generated profile:', {
      familySize: profile.familySize,
      budget: profile.monthlyBudget,
      usageLevel: profile.usageLevel,
      confidence
    });
    
    // Use existing recommendation engine with auto-generated profile
    const recommendations = PersonalizedRecommendationEngine.generatePersonalizedRecommendations(
      plans,
      profile,
      this.normalizeCategoryKey(category)
    );
    
    // Adjust confidence levels
    recommendations.forEach(rec => {
      rec.confidenceLevel = Math.min(rec.confidenceLevel * confidence, 0.85);
    });
    
    // Return top N recommendations
    const topRecommendations = recommendations.slice(0, limit);
    
    console.log('✅ Generated top recommendations:', 
      topRecommendations.map(r => ({
        company: plans.find(p => p.id === r.planId)?.company,
        score: r.personalizedScore,
        confidence: r.confidenceLevel
      }))
    );
    
    return topRecommendations;
  }
}
