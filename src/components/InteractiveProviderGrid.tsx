import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Check, Star, Zap, Smartphone, Wifi, Tv, Plus } from 'lucide-react';
import { cn } from '@/lib/utils';

// Import logos
import bezeqLogo from '@/assets/logos/bezeq-logo.png';
import partnerLogo from '@/assets/logos/partner-logo.png';
import pelephoneLogo from '@/assets/logos/pelephone-logo.png';
import yesLogo from '@/assets/logos/yes-logo.png';
import electricityLogo from '@/assets/logos/electricity-logo.png';
import cellcomLogo from '@/assets/logos/cellcom-logo.svg';
import hotLogo from '@/assets/logos/hot-logo.svg';
import netflixLogo from '@/assets/logos/netflix-logo.svg';
import electraLogo from '@/assets/logos/electra-logo.png';
import ramiLevyLogo from '@/assets/logos/rami-levy-logo.png';
import disneyLogo from '@/assets/logos/disney-logo.png';
import hboLogo from '@/assets/logos/hbo-logo.png';
import logo019 from '@/assets/logos/019-logo.png';

type Category = 'electricity' | 'cellular' | 'internet' | 'tv';

interface Provider {
  name: string;
  logo?: string;
  logoType?: 'image' | 'emoji';
  popular: boolean;
  rating: number;
  customers: string;
  color: string;
  description: string;
}

// Logo mapping for real company logos
const providerLogos: Record<string, string> = {
  '◊ó◊ë◊®◊™ ◊ó◊©◊û◊ú': electricityLogo,
  '◊ë◊ñ◊ß': bezeqLogo,
  '◊§◊®◊ò◊†◊®': partnerLogo,
  '◊§◊ú◊ê◊§◊ï◊ü': pelephoneLogo,
  '◊°◊ú◊ß◊ï◊ù': cellcomLogo,
  '◊î◊ï◊ò': hotLogo,
  '◊ô◊°': yesLogo,
};

interface InteractiveProviderGridProps {
  category: Category;
  value: string;
  onValueChange: (value: string) => void;
}

const categoryProviders: Record<Category, Provider[]> = {
  electricity: [
    { name: '◊ó◊ë◊®◊™ ◊ó◊©◊û◊ú', logoType: 'image', popular: true, rating: 4.2, customers: '2.8M', color: 'bg-yellow-500', description: '◊î◊°◊§◊ß ◊î◊ï◊ï◊™◊ô◊ß ◊ï◊î◊û◊ï◊ë◊ô◊ú ◊ë◊ô◊©◊®◊ê◊ú' },
    { name: '◊§◊ñ ◊ê◊†◊®◊í◊ô◊î', logoType: 'image', popular: true, rating: 4.5, customers: '850K', color: 'bg-blue-500', description: '◊ó◊ì◊©◊†◊ï◊™ ◊ï◊ê◊û◊ô◊†◊ï◊™ ◊ë◊û◊í◊ñ◊® ◊î◊ê◊†◊®◊í◊ô◊î' },
    { name: '◊ê◊ú◊ß◊ò◊®◊î ◊§◊ê◊ï◊ï◊®', logoType: 'image', popular: true, rating: 4.3, customers: '620K', color: 'bg-blue-600', description: '◊©◊ô◊®◊ï◊™ ◊û◊ï◊™◊ê◊ù ◊ê◊ô◊©◊ô◊™ ◊ï◊ê◊ô◊õ◊ï◊™◊ô' },
    { name: '◊ì◊ï◊® ◊ê◊ú◊ï◊ü ◊ê◊†◊®◊í◊ô◊î', logo: 'üåü', logoType: 'emoji', popular: true, rating: 4.4, customers: '480K', color: 'bg-green-500', description: '◊§◊™◊®◊ï◊†◊ï◊™ ◊ê◊†◊®◊í◊ô◊î ◊ô◊®◊ï◊ß◊î ◊ï◊ó◊õ◊û◊î' },
    { name: '◊°◊ú◊ß◊ï◊ù ◊ê◊†◊®◊í◊ô◊î', logoType: 'image', popular: false, rating: 4.1, customers: '320K', color: 'bg-red-500', description: '◊ó◊ë◊ô◊ú◊ï◊™ ◊û◊©◊™◊ú◊û◊ï◊™ ◊ú◊ë◊ô◊™' },
    { name: '◊ë◊ñ◊ß ◊ê◊†◊®◊í◊ô◊î', logoType: 'image', popular: false, rating: 3.9, customers: '220K', color: 'bg-blue-600', description: '◊ó◊ë◊ô◊ú◊ï◊™ ◊û◊©◊ï◊ú◊ë◊ï◊™ ◊¢◊ù ◊™◊ß◊©◊ï◊®◊™' },
    { name: '◊†◊ß◊°◊ò ◊ê◊†◊®◊í◊ô◊î', logo: '‚ö°', logoType: 'emoji', popular: false, rating: 4.0, customers: '280K', color: 'bg-orange-500', description: '◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î ◊ó◊õ◊û◊î ◊ú◊û◊ó◊®' },
    { name: '◊ê◊ï◊®◊û◊™ ◊ê◊†◊®◊í◊ô◊î', logo: 'üåû', logoType: 'emoji', popular: false, rating: 4.2, customers: '190K', color: 'bg-yellow-600', description: '◊û◊ï◊ë◊ô◊ú◊ô◊ù ◊ë◊ê◊†◊®◊í◊ô◊î ◊°◊ï◊ú◊ê◊®◊ô◊™' }
  ],
  cellular: [
    { name: '◊§◊ú◊ê◊§◊ï◊ü', logoType: 'image', popular: true, rating: 4.4, customers: '2.9M', color: 'bg-orange-500', description: '◊î◊®◊©◊™ ◊î◊í◊ì◊ï◊ú◊î ◊ï◊î◊û◊ï◊ë◊ô◊ú◊î ◊ë◊ô◊©◊®◊ê◊ú' },
    { name: '◊°◊ú◊ß◊ï◊ù', logoType: 'image', popular: true, rating: 4.3, customers: '2.1M', color: 'bg-red-500', description: '◊ó◊ì◊©◊†◊ï◊™ ◊ï◊ß◊ô◊©◊ï◊®◊ô◊ï◊™ ◊û◊™◊ß◊ì◊û◊™' },
    { name: '◊§◊®◊ò◊†◊®', logoType: 'image', popular: true, rating: 4.2, customers: '2.5M', color: 'bg-purple-500', description: '◊©◊ô◊®◊ï◊™ ◊ú◊ß◊ï◊ó◊ï◊™ ◊û◊¢◊ï◊ú◊î' },
    { name: '◊î◊ï◊ò ◊û◊ï◊ë◊ô◊ô◊ú', logoType: 'image', popular: true, rating: 4.1, customers: '1.2M', color: 'bg-red-600', description: '◊ó◊ë◊ô◊ú◊ï◊™ ◊ó◊û◊ï◊™ ◊ë◊û◊ó◊ô◊®◊ô◊ù ◊†◊ï◊ó◊ô◊ù' },
    { name: '019 ◊û◊ï◊ë◊ô◊ô◊ú', logoType: 'image', popular: false, rating: 4.0, customers: '890K', color: 'bg-blue-500', description: '◊û◊ó◊ô◊®◊ô◊ù ◊ê◊ò◊®◊ß◊ò◊ô◊ë◊ô◊ô◊ù ◊ú◊õ◊ï◊ú◊ù' },
    { name: '◊®◊û◊ô ◊ú◊ï◊ô ◊™◊ß◊©◊ï◊®◊™', logoType: 'image', popular: false, rating: 3.9, customers: '650K', color: 'bg-green-500', description: '◊ó◊ô◊°◊õ◊ï◊ü ◊û◊©◊û◊¢◊ï◊™◊ô ◊ë◊ó◊©◊ë◊ï◊ü ◊î◊†◊ô◊ô◊ì' },
    { name: '◊ô◊°', logoType: 'image', popular: false, rating: 4.0, customers: '380K', color: 'bg-green-600', description: '◊§◊©◊ò◊ï◊™ ◊ï◊ó◊°◊õ◊ï◊ü ◊ë◊ú◊ô ◊§◊©◊®◊ï◊™' },
    { name: '◊í◊ï◊ú◊ü ◊ò◊ú◊ß◊ï◊ù', logo: 'üì°', logoType: 'emoji', popular: false, rating: 3.7, customers: '180K', color: 'bg-blue-600', description: '◊õ◊ô◊°◊ï◊ô ◊û◊¢◊ï◊ú◊î ◊ë◊¶◊§◊ï◊ü ◊î◊ê◊®◊•' }
  ],
  internet: [
    { name: '◊ë◊ñ◊ß', logoType: 'image', popular: true, rating: 4.1, customers: '1.8M', color: 'bg-blue-500', description: '◊î◊™◊©◊™◊ô◊™ ◊î◊ú◊ê◊ï◊û◊ô◊™ ◊î◊û◊ï◊ë◊ô◊ú◊î' },
    { name: '◊î◊ï◊ò', logoType: 'image', popular: true, rating: 4.3, customers: '1.2M', color: 'bg-red-500', description: '◊û◊î◊ô◊®◊ï◊™ ◊ï◊ó◊ì◊©◊†◊ï◊™ ◊ë◊õ◊ú ◊ë◊ô◊™' },
    { name: '◊§◊®◊ò◊†◊®', logoType: 'image', popular: true, rating: 4.2, customers: '950K', color: 'bg-purple-500', description: '◊ó◊ë◊ô◊ú◊ï◊™ ◊í◊û◊ô◊©◊ï◊™ ◊ú◊õ◊ú ◊û◊©◊§◊ó◊î' },
    { name: '◊°◊ú◊ß◊ï◊ù', logoType: 'image', popular: true, rating: 4.0, customers: '780K', color: 'bg-red-600', description: '◊®◊©◊™ ◊ê◊û◊ô◊†◊î ◊ï◊ô◊¶◊ô◊ë◊î' },
    { name: '◊ô◊°', logoType: 'image', popular: false, rating: 4.1, customers: '320K', color: 'bg-green-500', description: '◊§◊©◊ï◊ò, ◊ò◊ï◊ë ◊ï◊û◊î◊ô◊®' },
    { name: '◊í◊ï◊ú◊ì ◊ú◊ô◊ô◊†◊°', logo: 'ü•á', logoType: 'emoji', popular: false, rating: 4.2, customers: '180K', color: 'bg-yellow-500', description: '◊ß◊ï◊ï◊ô ◊ñ◊î◊ë ◊ú◊û◊î◊ô◊®◊ï◊™ ◊û◊ß◊°◊ô◊û◊ú◊ô◊™' },
    { name: '◊†◊ò◊ï◊ï◊ô◊ñ◊ü', logo: 'üëÅÔ∏è', logoType: 'emoji', popular: false, rating: 3.8, customers: '140K', color: 'bg-blue-600', description: '◊ó◊ñ◊ï◊ü ◊®◊©◊™◊ô ◊û◊™◊ß◊ì◊ù' },
    { name: '013 ◊†◊ò◊ú◊ô◊ô◊ü', logo: '‚òéÔ∏è', logoType: 'emoji', popular: false, rating: 3.7, customers: '120K', color: 'bg-gray-500', description: '◊ß◊ï◊ï◊ô◊ù ◊û◊î◊ô◊û◊†◊ô◊ù ◊ï◊ô◊¶◊ô◊ë◊ô◊ù' }
  ],
  tv: [
    { name: '◊ô◊°', logoType: 'image', popular: true, rating: 4.4, customers: '1.1M', color: 'bg-green-500', description: '◊ë◊ô◊ì◊ï◊® ◊ú◊ú◊ê ◊î◊§◊°◊ß◊î - ◊î◊ò◊ï◊ë ◊ë◊ô◊©◊®◊ê◊ú' },
    { name: '◊î◊ï◊ò', logoType: 'image', popular: true, rating: 4.2, customers: '890K', color: 'bg-red-500', description: '◊ß◊ï◊ú◊†◊ï◊¢ ◊ï◊°◊ì◊®◊ï◊™ ◊§◊®◊ô◊û◊ô◊ï◊ù ◊ë◊ë◊ô◊™' },
    { name: '◊†◊ò◊§◊ú◊ô◊ß◊°', logoType: 'image', popular: true, rating: 4.5, customers: '2.8M', color: 'bg-red-700', description: '◊î◊°◊ò◊®◊ô◊û◊ô◊†◊í ◊î◊§◊ï◊§◊ï◊ú◊®◊ô ◊ë◊¢◊ï◊ú◊ù' },
    { name: '◊°◊ú◊ß◊ï◊ù TV', logoType: 'image', popular: true, rating: 4.0, customers: '650K', color: 'bg-red-600', description: '◊ò◊ú◊ï◊ï◊ô◊ñ◊ô◊î ◊ì◊ô◊í◊ô◊ò◊ú◊ô◊™ ◊û◊™◊ß◊ì◊û◊™' },
    { name: 'Disney+', logoType: 'image', popular: false, rating: 4.3, customers: '420K', color: 'bg-blue-600', description: '◊î◊ß◊°◊ù ◊©◊ú ◊ì◊ô◊°◊†◊ô ◊ú◊õ◊ú ◊î◊û◊©◊§◊ó◊î' },
    { name: 'HBO Max', logoType: 'image', popular: false, rating: 4.4, customers: '250K', color: 'bg-purple-700', description: '◊°◊ì◊®◊ï◊™ ◊ê◊ô◊õ◊ï◊™ ◊ë◊®◊û◊î ◊¢◊ï◊ú◊û◊ô◊™' },
    { name: '◊§◊®◊ò◊†◊® TV', logo: 'üé≠', logoType: 'emoji', popular: false, rating: 3.9, customers: '520K', color: 'bg-purple-500', description: '◊ë◊ô◊ì◊ï◊® ◊û◊©◊§◊ó◊™◊ô ◊ê◊ô◊õ◊ï◊™◊ô' },
    { name: '◊ê◊û◊ñ◊ï◊ü ◊§◊®◊ô◊ô◊ù', logo: 'üì¶', logoType: 'emoji', popular: false, rating: 4.2, customers: '290K', color: 'bg-orange-500', description: '◊û◊©◊ú◊ï◊ó◊ô◊ù ◊ó◊ô◊†◊ù ◊ï◊ë◊ô◊ì◊ï◊® ◊û◊¢◊ï◊ú◊î' }
  ]
};

const categoryIcons = {
  electricity: Zap,
  cellular: Smartphone,
  internet: Wifi,
  tv: Tv
};

export const InteractiveProviderGrid = ({ 
  category, 
  value, 
  onValueChange
}: InteractiveProviderGridProps) => {
  const [showAll, setShowAll] = useState(false);

  const providers = categoryProviders[category] || [];
  const CategoryIcon = categoryIcons[category];
  
  const popularProviders = providers.filter(p => p.popular);
  const otherProviders = providers.filter(p => !p.popular);
  
  const displayedProviders = showAll 
    ? providers 
    : [...popularProviders, ...otherProviders.slice(0, 4)];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Label className="text-lg font-semibold flex items-center gap-3">
          <div className="w-8 h-8 bg-gradient-to-br from-slate-100 to-slate-200 rounded-lg flex items-center justify-center">
            <CategoryIcon className="h-5 w-5 text-slate-600" />
          </div>
          ◊ë◊ó◊® ◊°◊§◊ß ◊†◊ï◊õ◊ó◊ô
          <Badge variant="secondary" className="text-xs bg-slate-100 text-slate-700 border border-slate-300">
            {providers.length} ◊°◊§◊ß◊ô◊ù
          </Badge>
        </Label>
      </div>

      {/* Provider Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
        {displayedProviders.map((provider) => (
          <div
            key={provider.name}
            className={cn(
              "group cursor-pointer transition-all duration-300 hover:scale-105 p-4 rounded-xl border-2 bg-white",
              value === provider.name 
                ? "border-slate-600 shadow-xl bg-slate-50 scale-[1.02]" 
                : "border-slate-200 hover:border-slate-400 hover:shadow-lg"
            )}
            onClick={() => onValueChange(provider.name === value ? "" : provider.name)}
          >
            {/* Logo Section */}
            <div className="flex items-center justify-center mb-3">
              <div className="relative">
                <div className={cn(
                  "w-12 h-12 rounded-xl flex items-center justify-center transition-all duration-300 border-2",
                  value === provider.name ? "border-slate-300 bg-white shadow-md" : "border-slate-200 bg-slate-50"
                )}>
                  {provider.logoType === 'image' && providerLogos[provider.name] ? (
                    <img 
                      src={providerLogos[provider.name]} 
                      alt={`${provider.name} logo`}
                      className="w-8 h-8 object-contain"
                      onError={(e) => {
                        const target = e.target as HTMLImageElement;
                        const parent = target.parentElement;
                        if (parent) {
                          parent.innerHTML = `<div class="w-8 h-8 rounded-lg ${provider.color} flex items-center justify-center text-white font-bold text-sm">${provider.name.charAt(0)}</div>`;
                        }
                      }}
                    />
                  ) : (
                    <div className={cn("w-8 h-8 rounded-lg flex items-center justify-center text-white font-bold text-sm", provider.color)}>
                      {provider.logo || provider.name.charAt(0)}
                    </div>
                  )}
                </div>
                
                {/* Selection Indicator */}
                {value === provider.name && (
                  <div className="absolute -top-1 -right-1 w-5 h-5 bg-slate-700 rounded-full flex items-center justify-center border-2 border-white">
                    <Check className="h-2.5 w-2.5 text-white" />
                  </div>
                )}
                
                {/* Popular Badge */}
                {provider.popular && (
                  <div className="absolute -top-2 -left-2">
                    <Badge className="text-xs bg-gradient-to-r from-amber-400 to-orange-500 text-white border-0 px-1.5 py-0.5 font-semibold">
                      <Star className="h-2.5 w-2.5 mr-0.5 fill-current" />
                      ◊§◊ï◊§◊ï◊ú◊®◊ô
                    </Badge>
                  </div>
                )}
              </div>
            </div>

            {/* Provider Info */}
            <div className="text-center mt-3">
              <h4 className={cn(
                "font-bold text-sm leading-tight transition-colors duration-200",
                value === provider.name ? "text-slate-900" : "text-slate-800 group-hover:text-slate-900"
              )}>
                {provider.name}
              </h4>
            </div>
          </div>
        ))}

        {/* Custom Provider Option */}
        <div
          className={cn(
            "group cursor-pointer transition-all duration-300 hover:scale-105 p-4 rounded-xl border-2 border-dashed bg-white",
            value === "◊ê◊ó◊®" 
              ? "border-slate-600 shadow-xl bg-slate-50 scale-[1.02]" 
              : "border-slate-300 hover:border-slate-500 hover:shadow-lg"
          )}
          onClick={() => onValueChange(value === "◊ê◊ó◊®" ? "" : "◊ê◊ó◊®")}
        >
          <div className="text-center">
            <div className="relative flex items-center justify-center mb-3">
              <div className={cn(
                "w-12 h-12 rounded-xl flex items-center justify-center transition-all duration-300 border-2 border-dashed",
                value === "◊ê◊ó◊®" ? "border-slate-400 bg-white" : "border-slate-300 bg-slate-50"
              )}>
                <Plus className="h-6 w-6 text-slate-500" />
              </div>
              {value === "◊ê◊ó◊®" && (
                <div className="absolute -top-1 -right-1 w-5 h-5 bg-slate-700 rounded-full flex items-center justify-center border-2 border-white">
                  <Check className="h-2.5 w-2.5 text-white" />
                </div>
              )}
            </div>
            
            <h4 className={cn(
              "font-bold text-sm transition-colors duration-200",
              value === "◊ê◊ó◊®" ? "text-slate-900" : "text-slate-800 group-hover:text-slate-900"
            )}>
              ◊°◊§◊ß ◊ê◊ó◊®
            </h4>
          </div>
        </div>
      </div>

      {/* Show More/Less Button */}
      {!showAll && otherProviders.length > 4 && (
        <div className="text-center pt-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowAll(true)}
            className="bg-white hover:bg-slate-50 border-2 border-slate-300 hover:border-slate-400 text-slate-700 hover:text-slate-900 px-6 py-2 rounded-xl transition-all duration-200"
          >
            ◊î◊¶◊í ◊¢◊ï◊ì {otherProviders.length - 4} ◊°◊§◊ß◊ô◊ù
          </Button>
        </div>
      )}

      {showAll && (
        <div className="text-center pt-4">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowAll(false)}
            className="bg-white hover:bg-slate-50 border-2 border-slate-300 hover:border-slate-400 text-slate-700 hover:text-slate-900 px-6 py-2 rounded-xl transition-all duration-200"
          >
            ◊î◊¶◊í ◊§◊ó◊ï◊™
          </Button>
        </div>
      )}
    </div>
  );
};